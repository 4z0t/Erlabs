
#1
print_if(V, B) :-
    ( B -> write(V)).

печать_дочь(Ребенок) :-
    print_if(Ребенок,женщина(Ребенок));
    true.

дочери(Родитель) :- forall(
                        родитель_ребёнок(Родитель, Ребенок),
                        печать_дочь(Ребенок)
                        ).

#2


forany(Cond,Action) :-
   \+forall(Cond,\+Action).

внук_дед(Внук, Дед):-
     forany(
              родитель_ребёнок(Родитель, Внук),
              forany(
                 родитель_ребёнок(Дед, Ребенок),
                 Родитель == Ребенок
                     )
                        ).

#3

кошка(лилия).
кошка(кися).
кошка(мила).
кот(пушок).
кот(снежок).

цвет(снежок, белый).
цвет(пушок, черный).
цвет(мила, серый).
цвет(кися, белый).
цвет(лилия, черный).



ночью_все_кошки_серые:- 
    forall(кошка(Кошка), цвет(Кошка, серый)).
#4
siblings(Child1, Child2):-
  родитель_ребёнок(Родитель, Child1),
  родитель_ребёнок(Родитель, Child2),
  Child1 \= Child2.

племянник(Племянник, Дядя):-
    siblings(Родитель, Дядя),
    родитель_ребёнок(Родитель, Племянник).

#6
язык_программирования(python).
язык_программирования(cpp).
язык_программирования(csharp).
язык_программирования(c).
язык_программирования(lua).
язык_программирования(java).
язык_программирования(javascript).
язык_программирования(haskell).
язык_программирования(lisp).

функциональный(lisp).
функциональный(haskell).
функциональный(javascript).
функциональный(cpp).

ооп(cpp).
ооп(java).
ооп(python).
ооп(csharp).

процедурный(c).
процедурный(lua).
процедурный(cpp).

написан_на(lua, c).
написан_на(python, c).
написан_на(javascript, cpp).
написан_на(java, cpp).
написан_на(haskell, c).


мультипарадигмальный(ЯП):-
    язык_программирования(ЯП),
    функциональный(ЯП),
    ооп(ЯП),
    процедурный(ЯП).

родственные_языки(Я1, Я2):-
    написан_на(Я1, Я),
    написан_на(Я2, Я),
    Я1\=Я2.


чисто_функциональный(ЯП):-
    язык_программирования(ЯП),
    функциональный(ЯП),
    \+ооп(ЯП),
    \+процедурный(ЯП).
    
    
ооп_языки([]).
ооп_языки([H|T]):-
    язык_программирования(H),
    ооп(H),
    ооп_языки(T).

#7

есть_рейс(мос,спб).
есть_рейс(мос,ект).
есть_рейс(мос,новосиб).
есть_рейс(спб,новосиб).
есть_рейс(спб,сочи).
есть_рейс(спб,минск).
есть_рейс(ект,сочи).
есть_рейс(сочи,киев).
есть_рейс(минск,новосиб).
есть_рейс(минск,киев).


forany(Cond,Action) :-
   \+forall(Cond,\+Action).

связь(X,Y):-
    есть_рейс(X,Y);
    есть_рейс(Y,X).

посещен([], _):-false.
посещен([H|T], City):-
    H==City; посещен(T, City).


связаны_не_посещен(X, Y, Seen):-
    связь(X,Y), \+посещен(Seen, Y).

связаны(X,Y):-связаны(X,Y,[X]).
связаны(X,Y, Seen):-
    X==Y;
    forany(связь(X,Z),
      (
        \+посещен(Seen, Z),
        связаны(Z,Y, [Z|Seen])
      )
    ).